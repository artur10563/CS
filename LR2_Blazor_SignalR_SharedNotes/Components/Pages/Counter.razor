@page "/counter"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

@rendermode InteractiveServer

<h3 class="mb-4 text-center fw-bold">Notes</h3>

@if (!isConnected)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 70vh;">
        <div class="card p-4 shadow-sm bg-warning-subtle border-warning" style="max-width: 400px;">
            <h5 class="mb-3 text-center fw-semibold">Enter your nickname</h5>
            <input type="text" class="form-control mb-3" placeholder="Your name" @bind="userName" />
            <button class="btn btn-primary w-100" @onclick="ConnectAsync">Join</button>
        </div>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="card p-3 shadow-sm bg-light border-0">
            <h5 class="mb-3 text-center text-primary">Welcome, @userName!</h5>

            <div class="input-group mb-4">
                <input class="form-control" placeholder="Write a note..." @bind="newNote" />
                <button class="btn btn-success" @onclick="CreateNote">Add</button>
            </div>

            <div class="d-flex flex-wrap justify-content-start gap-3">
                @foreach (var note in notes)
                {
                    <div class="card shadow-sm border-0 bg-warning-subtle" style="width: 200px;">
                        <div class="card-body p-3">
                            <h6 class="card-title text-dark fw-bold mb-1">@note.Author.Name</h6>
                            <p class="card-text text-dark mb-0">@note.Description</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private bool isConnected = false;
    private string userName = string.Empty;
    private string newNote = string.Empty;
    private List<Note> notes = new();

    private class Note
    {
        public int Id { get; set; }
        public string Description { get; set; } = string.Empty;
        public User Author { get; set; } = new();
    }

    private class User
    {
        public string Name { get; set; } = string.Empty;
    }

    private async Task ConnectAsync()
    {
        if (string.IsNullOrWhiteSpace(userName)) return;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/notehub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<List<Note>>("LoadNotes", async loadedNotes =>
        {
            notes = loadedNotes;
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("UserJoined", async name =>
        {
        });

        hubConnection.On<string>("UserLeft", async name =>
        {
        });

        hubConnection.On<Note>("NewNoteCreated", async note =>
        {
            notes.Add(note);
            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("Join", userName);

        isConnected = true;
    }

    private async Task CreateNote()
    {
        if (string.IsNullOrWhiteSpace(newNote)) return;
        await hubConnection!.InvokeAsync("CreateNote", newNote);
        newNote = string.Empty;
    }
}
